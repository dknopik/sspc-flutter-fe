use std::precompiles::ec_recover
use safe_recover::recover_from_array

const COOPERATIVE_CLOSE_ROUND: u128 = 0xffffffffffffffffffffffffffffffff
const DISPUTE_PERIOD: u64 = 60 * 60 * 24

// types
pub enum Progression {
    Nonexistant
    Proposed
    Accepted
    Disputed
    Closed
}

struct ChannelState {
    pub a: address
    pub b: address
    pub value_a: u256
    pub value_b: u256
    pub progression: Progression
    pub round: u128
}

struct Dispute {
    pub time: u64
    pub closer: address
}

struct HashContents {
    pub id: u256
    pub a: address
    pub b: address
    pub value_a: u256
    pub value_b: u256
    pub round: u128
}

//events
struct Open {
    #indexed
    pub id: u256
}

struct Accepted {
    #indexed
    pub id: u256
}

struct Closing {
    #indexed
    pub id: u256
    pub round: u128
    pub time: u64
}

struct Closed {
    #indexed
    pub id: u256
}

fn hash_state(id: u256, channel: ChannelState, value_a: u256, value_b: u256, round: u128) -> u256 {
    return keccak256(HashContents(
        id,
        a: channel.a,
        b: channel.b,
        value_a,
        value_b,
        round,
    ).abi_encode())
}

fn other(channel: ChannelState, addr: address) -> address {
    if (channel.a == addr) {
        return channel.b
    } else if (channel.b == addr) {
        return channel.a
    } else {
        revert
    }
}

contract Channel {
    channels: Map<u256, ChannelState>
    disputes: Map<u256, Dispute>

    fn in_progression(self, id: u256, progression: Progression) {
        // equality between enums is unsupported??? wat
        // assert self.channels[id].progression == progression, "channel is in invalid progression"
    }

    fn valid_state(self, id: u256, value_a: u256, value_b: u256) {
        assert self.channels[id].value_a + self.channels[id].value_b == value_a + value_b, "value sums dont match"
    }

    pub fn open(mut self, mut ctx: Context, id: u256, addr_b: address, value_a: u256, value_b: u256) {
        let mut channel: ChannelState = self.channels[id].to_mem()
        match channel.progression {
            Progression::Nonexistant => {}
            _ => {
                revert
            }
        }
        assert ctx.msg_value() == value_a, "proposer must add the correct value"
        channel.a = ctx.msg_sender()
        channel.b = addr_b
        channel.value_a = value_a
        channel.value_b = value_b
        channel.progression = Progression::Proposed
        self.channels[id] = channel
        ctx.emit(Open(id))
    }

    pub fn accept(mut self, mut ctx: Context, id: u256) {
        let mut channel: ChannelState = self.channels[id].to_mem();
        match channel.progression {
            Progression::Proposed => {}
            _ => {
                revert
            }
        }
        assert ctx.msg_value() == channel.value_b, "acceptooor must add the correct value"
        self.channels[id].progression = Progression::Accepted
        ctx.emit(Accepted(id))
    }

    pub fn cooperative_close(mut self, mut ctx: Context, id: u256, value_a: u256, value_b: u256, sig: Array<u8, 65>) {
        let mut channel: ChannelState = self.channels[id].to_mem();
        match self.channels[id].progression {
            Progression::Accepted => {}
            _ => {
                revert
            }
        }
        let hash: u256 = hash_state(id, channel, value_a, value_b, round: COOPERATIVE_CLOSE_ROUND)
        let addr: address = other(channel, addr: ctx.msg_sender())
        assert recover_from_array(hash, sig) == addr, "invalid signature"
        self.payout(ctx, id, value_a, value_b)
        ctx.emit(Closed(id))
    }

    fn payout(mut self, mut ctx: Context, id: u256, value_a: u256, value_b: u256) {
        self.channels[id].progression = Progression::Closed
        ctx.send_value(to: self.channels[id].a, wei: value_a)
        ctx.send_value(to: self.channels[id].b, wei: value_b)
    }
}